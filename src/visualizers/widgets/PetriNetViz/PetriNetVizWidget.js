/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Dec 01 2020 16:19:41 GMT-0600 (Central Standard Time).
 */

define(['jointjs','css!./styles/PetriNetVizWidget.css','css!jointjscss'], function (jointjs) {
    'use strict';

    var WIDGET_CLASS = 'petri-net-viz';

    function PetriNetVizWidget(logger, container, client) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
        this._client = client
        this._logger.debug('ctor finished');
    }

    PetriNetVizWidget.prototype._initialize = function () {
        console.log("STARTING WIDGET")
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);
        //this._inPlaces = new Map()
        //this._outPlaces = new Map()
        this._places = []
        this._transitions = []
        this._pn = jointjs.shapes.pn;
        console.log(this._client)
        this._graph = new jointjs.dia.Graph();
        this._paper = new jointjs.dia.Paper({
        el: $(this._el),
        width: width,
        height: height,
        gridSize: 1,
        defaultAnchor: { name: "perpendicular" },
        defaultConnectionPoint: { name: "boundary" },
        model: this._graph,
        });

        this._paper.setInteractivity(false);
        this._paper.removeTools();

        //set up model
        this._paper.on("element:pointerdown", (elementView) =>
            this.fireTransition(elementView.model)
        );
        PetriNetVizWidget.prototype.fireTransition = function (transition) {
            var path = transition.get("id")
            console.log(path)
            console.log(this._reverseJoint)
            //check if fireable
            var fireable = true
            for(var i = 0; i < this._inplaces[0].length; i++){
                if(this._inplaces[0][i] === path && this._tokenmap[this._inplaces[1][i]] < 1){
                    fireable = false;
                    break;
                }
            }
            console.log(fireable)
            console.log(this._tokenmap)
            if(fireable){
                console.log(this._outplaces)
                console.log(this._inplaces)
                for(var i = 0; i < this._inplaces[0].length; i++){
                    if(this._inplaces[0][i] === path){
                        this._tokenmap[this._inplaces[1][i]] -= 1;
                    }
                    this._jointMap[this._inplaces[1][i]].set('tokens', this._tokenmap[this._inplaces[1][i]])
                }
                for(var i = 0; i < this._outplaces[0].length; i++){
                    if(this._outplaces[0][i] === path){
                        this._tokenmap[this._outplaces[1][i]] += 1;
                    }
                   // this._jointMap[this._inplaces[1][i]].set('tokens', this._tokenmap[this._inplaces[1][i]])
                }
            }
            else{
                window.alert("Error, you can't do that, simulation resetting")
                this._initialize()
            }
        }

        // Create a dummy header
        this._el.append('<h3>PetriNetViz Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    PetriNetVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    PetriNetVizWidget.prototype.addNode = function (desc) {
        console.log(desc)
        
        if (desc) {
            var elem,
            found = false;
            if(this._jointMap == undefined){
                //key is id, value is joint item
                this._jointMap = new Map()
                this._reverseJoint = new Map()
            }
            if(desc.meta === "Inplace" || desc.meta === "Outplace" ){
                console.log(desc.meta)
               // self._inPlaces[this._client.getNode(desc.id).getOwnPointerId("src")] = this._client.getNode(desc.id).getOwnPointerId("dst")
                if(this._jointMap[this._client.getNode(desc.id).getOwnPointerId("src")] != undefined && this._jointMap[this._client.getNode(desc.id).getOwnPointerId("dst")] != undefined){

                    //create link visually 
                    elem = new this._pn.Link({
                        source: {
                        id: this._jointMap[this._client.getNode(desc.id).getOwnPointerId("src")],
                        selector: ".root",
                        },
                        target: {
                        id: this._jointMap[this._client.getNode(desc.id).getOwnPointerId("dst")],
                        selector: ".root",
                        },
                        attrs: {
                        ".connection": {
                            fill: "none",
                            "stroke-linejoin": "round",
                            "stroke-width": "2",
                            stroke: "#4b4a67",
                        },
                        },
                    });
                    found = true
                }
                else{
                    if(this._waiting == undefined){
                        this._waiting = []
                    }
                    console.log(this._waiting)
                    this._waiting.push(desc)
                }
                if(desc.meta === "Inplace"){
                    if(this._inplaces == undefined){
                        this._inplaces = [[],[]];
                    }
                    var src = this._client.getNode(desc.id).getOwnPointerId("src"),
                    dst = this._client.getNode(desc.id).getOwnPointerId("dst")
                    this._inplaces[1].push(src)
                    this._inplaces[0].push(dst)
                }
                else if(desc.meta === "Outplace"){
                    if(this._outplaces == undefined){
                        this._outplaces = [[],[]];
                    }
                    var src = this._client.getNode(desc.id).getOwnPointerId("src"),
                    dst = this._client.getNode(desc.id).getOwnPointerId("dst")
                    this._outplaces[0].push(src)
                    this._outplaces[1].push(dst)
                }
            }
            else if (desc.name === "Outplace"){
                //self._inPlaces[this._client.getNode(desc.id).getOwnPointerId("dst")] = this._client.getNode(desc.id).getOwnPointerId("src")
                
                //create link visually 
                elem = new this._pn.Link({
                    source: {
                      id: this._jointMap[this._client.getNode(desc.id).getOwnPointerId("src")],
                      selector: ".root",
                    },
                    target: {
                      id: this._jointMap[this._client.getNode(desc.id).getOwnPointerId("dst")],
                      selector: ".root",
                    },
                    attrs: {
                      ".connection": {
                        fill: "none",
                        "stroke-linejoin": "round",
                        "stroke-width": "2",
                        stroke: "#4b4a67",
                      },
                    },
                    id: desc.id
                  });
                  found = true
            }
            else if (desc.meta === "Transition"){
                console.log(desc)
               // self._transitions.append(desc)
                elem = new this._pn.Transition({
                    position: desc.position,
                    attrs: {
                      ".label": {
                        text: desc.name,
                        fill: "#fe854f",
                      },
                      ".root": {
                        fill: "#9586fd",
                        stroke: "#9586fd",
                      },
                    },
                    id: desc.id
                  });

                  found = true
            }
            else if (desc.meta === "Place"){
                console.log(desc)
                if(self._places){
                    self._places.append(desc)
                }
                

                elem = new this._pn.Place({
                    position: desc.position,
                    attrs: {
                      ".label": {
                        text: desc.name,
                        fill: "#7c68fc",
                      },
                      ".root": {
                        stroke: "#9586fd",
                        "stroke-width": 3,
                      },
                      ".tokens > circle": {
                        fill: "#7a7e9b",
                      }
                    },
                    tokens: this._client.getNode(desc.id).getAttribute("tokens"),
                    id: desc.id
                  });
                found = true
                if(this._tokenmap == undefined){
                    this._tokenmap = new Map();
                }
                this._tokenmap[desc.id] = this._client.getNode(desc.id).getAttribute("tokens")
            }
            if(found){
                this._jointMap[desc.id] = elem
                this._reverseJoint[elem] = desc.id
                this._graph.addCell([elem])
                this.checkWaiting()
            }
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    PetriNetVizWidget.prototype.checkWaiting = function(){
        if(this._waiting){
            for(var i = 0; i< this._waiting.length; i++){
                var desc = this._waiting[i]
                var src = this._client.getNode(desc.id).getOwnPointerId("src")
                var dst = this._client.getNode(desc.id).getOwnPointerId("dst")
                console.log(src)
                console.log(dst)
                if(this._jointMap[src] && this._jointMap[dst]){
                    console.log(this._jointMap[src])
                    console.log(this._jointMap[dst])
                    console.log(this._waiting)
                    var elem = new this._pn.Link({
                        source: {
                        id: this._jointMap[src],
                        selector: ".root",
                        },
                        target: {
                        id: this._jointMap[dst],
                        selector: ".root",
                        },
                        attrs: {
                        ".connection": {
                            fill: "none",
                            "stroke-linejoin": "round",
                            "stroke-width": "2",
                            stroke: "#4b4a67",
                        },
                        },
                    });
                    this._jointMap[desc.id] = elem
                    this._reverseJoint[elem] = desc.id
                    this._graph.addCell([elem])
                    this._waiting = this._waiting.filter(function(value, index, arr){ 
                        return value !== desc;
                    });
                    console.log("MADE IT")
                
                }

            }
        }
    }

    PetriNetVizWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    PetriNetVizWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    PetriNetVizWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    PetriNetVizWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVizWidget.prototype.destroy = function () {
    };

    PetriNetVizWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetVizWidget has been activated');
    };

    PetriNetVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetVizWidget has been deactivated');
    };

    return PetriNetVizWidget;
});